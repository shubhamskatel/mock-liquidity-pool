/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MockToken, MockTokenInterface } from "../../contracts/MockToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimal",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516119d23803806119d283398181016040528101906100329190610501565b8282816003908161004391906107ad565b50806004908161005391906107ad565b50505080600560006101000a81548160ff021916908360ff16021790555061009e338260ff16600a61008591906109e1565b620f42406100939190610a2c565b6100a660201b60201c565b505050610b5f565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036101185760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161010f9190610aaf565b60405180910390fd5b61012a6000838361012e60201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036101805780600260008282546101749190610aca565b92505081905550610253565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561020c578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161020393929190610b0d565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361029c57806002600082825403925050819055506102e9565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516103469190610b44565b60405180910390a3505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103ba82610371565b810181811067ffffffffffffffff821117156103d9576103d8610382565b5b80604052505050565b60006103ec610353565b90506103f882826103b1565b919050565b600067ffffffffffffffff82111561041857610417610382565b5b61042182610371565b9050602081019050919050565b60005b8381101561044c578082015181840152602081019050610431565b60008484015250505050565b600061046b610466846103fd565b6103e2565b9050828152602081018484840111156104875761048661036c565b5b61049284828561042e565b509392505050565b600082601f8301126104af576104ae610367565b5b81516104bf848260208601610458565b91505092915050565b600060ff82169050919050565b6104de816104c8565b81146104e957600080fd5b50565b6000815190506104fb816104d5565b92915050565b60008060006060848603121561051a5761051961035d565b5b600084015167ffffffffffffffff81111561053857610537610362565b5b6105448682870161049a565b935050602084015167ffffffffffffffff81111561056557610564610362565b5b6105718682870161049a565b9250506040610582868287016104ec565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806105de57607f821691505b6020821081036105f1576105f0610597565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106597fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261061c565b610663868361061c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006106aa6106a56106a08461067b565b610685565b61067b565b9050919050565b6000819050919050565b6106c48361068f565b6106d86106d0826106b1565b848454610629565b825550505050565b600090565b6106ed6106e0565b6106f88184846106bb565b505050565b5b8181101561071c576107116000826106e5565b6001810190506106fe565b5050565b601f82111561076157610732816105f7565b61073b8461060c565b8101602085101561074a578190505b61075e6107568561060c565b8301826106fd565b50505b505050565b600082821c905092915050565b600061078460001984600802610766565b1980831691505092915050565b600061079d8383610773565b9150826002028217905092915050565b6107b68261058c565b67ffffffffffffffff8111156107cf576107ce610382565b5b6107d982546105c6565b6107e4828285610720565b600060209050601f8311600181146108175760008415610805578287015190505b61080f8582610791565b865550610877565b601f198416610825866105f7565b60005b8281101561084d57848901518255600182019150602085019450602081019050610828565b8683101561086a5784890151610866601f891682610773565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610905578086048111156108e1576108e061087f565b5b60018516156108f05780820291505b80810290506108fe856108ae565b94506108c5565b94509492505050565b60008261091e57600190506109da565b8161092c57600090506109da565b8160018114610942576002811461094c5761097b565b60019150506109da565b60ff84111561095e5761095d61087f565b5b8360020a9150848211156109755761097461087f565b5b506109da565b5060208310610133831016604e8410600b84101617156109b05782820a9050838111156109ab576109aa61087f565b5b6109da565b6109bd84848460016108bb565b925090508184048111156109d4576109d361087f565b5b81810290505b9392505050565b60006109ec8261067b565b91506109f78361067b565b9250610a247fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461090e565b905092915050565b6000610a378261067b565b9150610a428361067b565b9250828202610a508161067b565b91508282048414831517610a6757610a6661087f565b5b5092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9982610a6e565b9050919050565b610aa981610a8e565b82525050565b6000602082019050610ac46000830184610aa0565b92915050565b6000610ad58261067b565b9150610ae08361067b565b9250828201905080821115610af857610af761087f565b5b92915050565b610b078161067b565b82525050565b6000606082019050610b226000830186610aa0565b610b2f6020830185610afe565b610b3c6040830184610afe565b949350505050565b6000602082019050610b596000830184610afe565b92915050565b610e6480610b6e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461013457806370a082311461015257806395d89b4114610182578063a9059cbb146101a0578063dd62ed3e146101d057610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a0610200565b6040516100ad9190610ab8565b60405180910390f35b6100d060048036038101906100cb9190610b73565b610292565b6040516100dd9190610bce565b60405180910390f35b6100ee6102b5565b6040516100fb9190610bf8565b60405180910390f35b61011e60048036038101906101199190610c13565b6102bf565b60405161012b9190610bce565b60405180910390f35b61013c6102ee565b6040516101499190610c82565b60405180910390f35b61016c60048036038101906101679190610c9d565b610305565b6040516101799190610bf8565b60405180910390f35b61018a61034d565b6040516101979190610ab8565b60405180910390f35b6101ba60048036038101906101b59190610b73565b6103df565b6040516101c79190610bce565b60405180910390f35b6101ea60048036038101906101e59190610cca565b610402565b6040516101f79190610bf8565b60405180910390f35b60606003805461020f90610d39565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610d39565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b60008061029d610489565b90506102aa818585610491565b600191505092915050565b6000600254905090565b6000806102ca610489565b90506102d78582856104a3565b6102e2858585610538565b60019150509392505050565b6000600560009054906101000a900460ff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461035c90610d39565b80601f016020809104026020016040519081016040528092919081815260200182805461038890610d39565b80156103d55780601f106103aa576101008083540402835291602001916103d5565b820191906000526020600020905b8154815290600101906020018083116103b857829003601f168201915b5050505050905090565b6000806103ea610489565b90506103f7818585610538565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b61049e838383600161062c565b505050565b60006104af8484610402565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156105325781811015610522578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161051993929190610d79565b60405180910390fd5b6105318484848403600061062c565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105aa5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016105a19190610db0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361061c5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016106139190610db0565b60405180910390fd5b610627838383610803565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361069e5760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016106959190610db0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107105760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016107079190610db0565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080156107fd578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516107f49190610bf8565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108555780600260008282546108499190610dfa565b92505081905550610928565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156108e1578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016108d893929190610d79565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361097157806002600082825403925050819055506109be565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a1b9190610bf8565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a62578082015181840152602081019050610a47565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a8a82610a28565b610a948185610a33565b9350610aa4818560208601610a44565b610aad81610a6e565b840191505092915050565b60006020820190508181036000830152610ad28184610a7f565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0a82610adf565b9050919050565b610b1a81610aff565b8114610b2557600080fd5b50565b600081359050610b3781610b11565b92915050565b6000819050919050565b610b5081610b3d565b8114610b5b57600080fd5b50565b600081359050610b6d81610b47565b92915050565b60008060408385031215610b8a57610b89610ada565b5b6000610b9885828601610b28565b9250506020610ba985828601610b5e565b9150509250929050565b60008115159050919050565b610bc881610bb3565b82525050565b6000602082019050610be36000830184610bbf565b92915050565b610bf281610b3d565b82525050565b6000602082019050610c0d6000830184610be9565b92915050565b600080600060608486031215610c2c57610c2b610ada565b5b6000610c3a86828701610b28565b9350506020610c4b86828701610b28565b9250506040610c5c86828701610b5e565b9150509250925092565b600060ff82169050919050565b610c7c81610c66565b82525050565b6000602082019050610c976000830184610c73565b92915050565b600060208284031215610cb357610cb2610ada565b5b6000610cc184828501610b28565b91505092915050565b60008060408385031215610ce157610ce0610ada565b5b6000610cef85828601610b28565b9250506020610d0085828601610b28565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d5157607f821691505b602082108103610d6457610d63610d0a565b5b50919050565b610d7381610aff565b82525050565b6000606082019050610d8e6000830186610d6a565b610d9b6020830185610be9565b610da86040830184610be9565b949350505050565b6000602082019050610dc56000830184610d6a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0582610b3d565b9150610e1083610b3d565b9250828201905080821115610e2857610e27610dcb565b5b9291505056fea264697066735822122008f3b8357d688bff13b3d69e72b624fa92a0f42a7e89df2ccb41bbe68ed3b83164736f6c634300081c0033";

type MockTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockToken__factory extends ContractFactory {
  constructor(...args: MockTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    decimal: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name, symbol, decimal, overrides || {});
  }
  override deploy(
    name: string,
    symbol: string,
    decimal: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name, symbol, decimal, overrides || {}) as Promise<
      MockToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockToken__factory {
    return super.connect(runner) as MockToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenInterface {
    return new Interface(_abi) as MockTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockToken {
    return new Contract(address, _abi, runner) as unknown as MockToken;
  }
}
